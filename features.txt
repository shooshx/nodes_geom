**** Application ****
- Import and export programs to readable YAML
- Display the output of a single selected node marked with the blue display flag
- Display outline of any number of "template" outputs of nodes marked with the template flag

**** Expression Engine ****

- Variable nodes can calculate and distribute values to other nodes
- Transform code example:
    t = mat3() 
    t.translate(0.1, 0.2) 
    t.rotate(20)   
    return t

**** Nodes ****

Node: Geom Primitive
- Create a simple geometry Primitive
- Rect, rect with triangles, ellipse (circle), regular polygon, star shape
- Base size and Transform

Node: Manual Geometry
- Create a collection of vertices (Mesh) or closed paths
- Control color of every vertex
- Input exact coordinates by clicking the coordinate in the table
- Add custom vertex properties using the "Add Column" button and change the name of the property by clicking their name in the title of the table
    - Add bezier control points columns to path objects, change their initial value from 0,0 by editing the numbers and then drag the points in the viewport

Node: Gradient
- Create linear, radial and sampler gradient
    - sampler are gradients without geometry used for function sampling see Node Func-Fill
- Edit geometry, edit color stop points and colors
- Edit exact position of stop by clicking in the table
- Control gradient spread beyond edges: pad, repeat, reflect
- generate stops using a function of t
    - "return rgb(255,128,0) + rgb(t, t, t)*255"
- Control smoothing and resolution in case it's rendered to a texture
- Load a preset gradient

Node: Divide
- Divide each quad in a quad mesh into smaller quads
- Divide line segments in a path into smaller segment
- by a constant number of division or a constant required distance
- Can set the distance to be exact, in that case the result complete quad might be of different size than the input quad
  - exact distance doesn't work for lines
- Can set different distances for u and v coordinates

Node: Set Attribute
- Set an attribute of vertices or faces of gemortry to a constant, sampled or calculated value
- Set attribute name, type and object to bind to (vertices or faces)
- types: float, vec2 (normal), color (vec4), image-fill, transform
- Sample color value from an image or gradient using in_src in expression
    - face attribute from image is sampled at the middle of the face
    - use in_src.at(x, y) to sample the input image/gradient anywhere. y is optional, default=0
       - useful for sampling Gradient that is in "Sample" mode using some vertex/face attribute, see Marching Squares
- Calculate value according to vertex or face position
- Expression possibilites:
    - Any attribute that already exists the input bound objects (in_obj.vtx_pos.x, in_obj.face_color.r)
    - Index in the attribute we bind to and set value for (in_obj.index)
    - Color from the source input (in_src to get the color vec4, in_src.r for just red)
    - computed attributes: 
        in_obj.face_center: geomtric center of face (vec3)
- special attribute names that can be set:
    - pos (vertex) - vertex position
    - color (vertex and face) - fill color
    - radius (vertex) - of the vertex circle
    - fill (face, with type:image-fill) - makes the input geometry a clipping path for the source
    - transform (vertex and face) - change position/rotation per vertex or per face

Node: Geometry Merge
- Merges one or more geometry objects into one geometry object
- Meshes of the same type result in a mesh of the same type
- Any other combination results in a paths object
- Can deduplicate vertices with a given epsilon accuracy

Node: Geometry Copy
- Copy in_obj geometry with multiple transformations
- Transformations can be base on in_target geometry vertices locations
- If no in_target geometry is given, a count of vertices to generate needs to be specified
- transform expressions can use variable 'index' to know which copy it is controlling

Node: Scatter 
- Create an image with single pixels scattered according to a given function
- Output can be linked to "Pixels to Vertices" node to create geometry
- Expression possibilityes:
    - use "coord" variable to know where you are
    - can use color from input textures/gradient 
- Input a clipping shape to control exactly where points are created
- The output points is a subset of an initial points pattern. This can either be
    - Randomally generated using a given seed and initial count 
    - From input geometry (usually of a some vertices pattern
        - This can optionally be shuffled to get some randomization in the points selection
- Set the resolution of the render to control the granularity and precision

Node: Group Objects

Node: Function Fill
- Create an image using an expression or GLSL code
- Can get input from image, gradient and distance field
- Sample texture with 
    - in_tex(coord) or in_tex(x,y) for texture 0 or
    - in_texi(i, coord) or in_tex(i,x,y) for texture 0 to 4
- in "Float to Gradient" input texture 0 can optionally be a gradient for the value, otherwise a default gold gradient is used
- Examples for "Float to Gradient"
    - return coord.x
    - return in_texi(1, coord).r  with texture 1 being an image, a gradient or distance field (which can have negative values)

Node: Boolean Operation
- Perform boolean operations between paths and meshs: union, intersect, subtract, xor
- Doesn't support bezier curves intersection
- Winding of the paths should be the same, otherwise the result may be wrong

Node: Pen
- Take as input a mesh or paths object and add vertices to it
- Set the count of how many vertices to add
- Set the expression for the position of the vertex using "index" variable. Example:
    x = cos(index/50)
    y = sin(index/85)
    return vec2(x,y)
- Can be used with Physics Extract Transform node to make a pen that follows a physics object. Example:
    return trans.get_pos()  
- Enable or disable useful in animation for discarding some points. Example:
    Expression: frame_num > 10
- Limit how close generated points are using the "Min Distance" parameter
- Can add additional properties that are added to the geometry along with the position.
  This includes "line_color", "line_width", "vtx_color" and any other vtx_ property, but not face properties since this node 
  not produce faces (This is also possible with a separate SetAttr node)

Distance fields
---------------

Node: Field Primitive
- create a primitive shape distance fields
  - Circle, box
  - Inverse Circle can be used with Max combiner to get the same effect as normal circle and smoothmin combiner

Node: Field Combine
- combine several distance fields into a single distance field
  - Min - union, Max - intersection
  - Smooth-min - union with soft transitions
- Function - define an expression for a distance field that can be stand alone or take the input distance fields
  - variables that can be used: coord (.x, .y)
  - function can use variables from variables nodes. 
    The same variable name can't get more than one value in the same eventual unified distance field
  - function can use input distance field by with in_fields.0, in_fields.1 etc'

Node: Field image
- Turn input image or gradient into a distance field
  - use in_texi(<index>, coord) to access the image. in_tex(coord) not supported here

Node: Field From Geometry
- Turn a mesh or multi-paths into a distance field
  - bezier curves shader takes a long time to compile
  - assumes paths are closed

Node: Field Copy
- Copy the same distance field multiple times
  - into the positions of the vertices of the in_target mesh
    use "in_target.vtx_pos" or "in_target.vtx_radius" for instace in the transform parameters
  - into a set number of instances accordin to "Count" parameter, which is enabled only if there isn't a mesh input
    use "index" in the transform parameters to differenciate between the instances

Node: Marchin Squares
- Trace some thresholds iso-lines of a distance field
- One of two methods: 
    - simple marching-squares - produces lots of vertices and tiny straight lines
    - po-trace like inkscape is doing - produces few vertices and interpolated bezier curves
- select the resolution of the distance field sampling - larger sampling produces more accurate result 
- "Flip sign" parameter - needed if the trace produces an outside frame
- control the position and orientation of the sampling area
- Trace multiple iso-lines by setting Iso-Count to more than 1 and setting Iso-Step
    - negative step goes inside, positive goes outside
    - Step can be an expression that depend on "index"
- The created MultiPath has the property "face_index" and "face_indexf" to identify the iso lines. Use this property in SetAttr to set color 
    - face_index is an integer count, face_indexf is normalized to the range of [0,1]
  to the created faces. Examples for SetAttr:
    - Bind To: Faces, Color: return rgb(in_obj.face_index * 20, in_obj.face_index * 30,255)
    - in_src is gradient in sample mode, Bind To: Faces, Color: return in_src.at(in_obj.face_indexf) 


Animation
---------
Node: Pick One
- Gets multiple inputs and selects one of the inputs according to an expression returning integer
- It's possible to rearrange the inputs
- Expression can return -1 to keep the previously outputted object (and not update to the lates object from any input)



Physics
-------

Node: Physics Body
- Create a definition of a physical body and add a single Fixture to it
- Type: 
   - Dynamic - forces act upone it
   - Kinematic - can have velocity but forces don't act on it
   - Static - doesn't move
- Shape either box or circle for now
- Restitution - how bouncy the body is
- Transform doesn't include scale since that is not supported by the engine

Node: Physics Joint
- Create a definition of a join between two bodies
- Type:
  - Revolute - pivot point that can rotate around an anchor
      - it's possible to define where the two anchors are relative to each body
        If there's a gap it would be close quickly
      - can be a motor which applies angular force
  - Distance - like a rubber band between two bodies
      - can control if the two bodies connected should collide with each other

Node: Physics Merge
- Merge several definitions into a single definitions object

Node: Physics Simulator
- This is the integrator node for physics
- Given a definition - create a world for the simulation
- GIven a physics world from the previous frame, advance it by a single frame

Node: Extract transform
- Given a body definition and a physics world, extract the transformation of the body
  and expose it as a variable
- Can specify the relative offset to the body