

The engine runs nodes
- runs variables resolve
- find the roots that need to be displayed (display node, template)
- maps from the roots who are the nodes that are dirty
    - need to be a separate step from run() step since run() may trigger dirtyness
- runs the dirty nodes and down towards the root

Node becomes dirty by
- parameter change
- connect/disconnect of a terminal
- The object in one of its terminals changed
    This is needed for A->B, when the user displays A, changes it, then displays B - B needs to be invalidated and not hold on to old object

Terminals
- Out terminals hold a real reference to objects, input terminals hold a weak reference
- if a node needs a mutable copy of an object coming in an input, calls get_mutable and the object is cloned
- The node keeps its output object as cache for future frames
- bad idea: having enabled/disabled terminals. Disabled terminal still has an invisible connection to it
New deal:
- Not clearing input variables anymore before each run
-   this is so that a node can really know if the input was dirty
- Instead of running node and dispersing the output to all lines, Before run, the node collects its inputs
- (normal objects) Output terminals has version, input check if what they have is the same as the last version produced by the output
- (variables) the value of the variables is checked instead of a version, in order to avoid a multi-terminals

Colors
- when dealing with images, ranges is 0-255 to r,g,b,alphai and 0-1 to alpha, as sampled from images
- when dealing with shaders, webgl, all is in range 0-1
    - ParamColor scales its values before doing gl.uniform
    - mesh attributes use need_normalize
    - shader coder expects to get values in [0-1]

Webgl bad idea: canvas for every NodeShader
- textures created in one NodeShader can't be used by the other
  - move textures using createBitmap costly for no reason
- likely will not produce a significant speed boost on top of avoiding canvas size change
Webgl greedy resize - every change to width and height causes a performance degradation so to avoid it I don't resize every time
- resize only to enlarge
- keep track of the max size in a frame and don't allow the canvas to remain any larger to avoid getting stuck on a huge canvas when it's not needed
- when getting the pixels, need to use the y offset since textures in frame buffer are mounted at the bottom left corner and createImageBitmap origin is top left
- don't do that yet to 2d canvas like canvas_img_shadow since it may not be needed